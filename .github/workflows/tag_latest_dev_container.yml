name: Tag Latest Dev Container

on:
    workflow_call:
        secrets:
            PUSH_IMAGE_ROLE:
                required: true
        inputs:
            dev_container_ecr:
                type: string
                description: "The name of the ECR repository to push the dev container image to."
                required: true
            dev_container_image_tag:
                type: string
                description: "The tag to use for the dev container image."
                required: true
            version_tag_to_apply:
                type: string
                description: "The version tag to apply to the latest dev container image."
                required: true
jobs:
    tag_latest_dev_container:
        permissions:
            id-token: write
        runs-on: ubuntu-22.04
        steps:
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8
              with:
                  aws-region: eu-west-2
                  role-to-assume: ${{ secrets.PUSH_IMAGE_ROLE }}
                  role-session-name: multi-arch-manifest
                  output-credentials: true

            - name: Retrieve AWS Account ID
              id: retrieve-deploy-account-id
              run: |
                  ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                  echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"

            - name: Login to Amazon ECR
              run: |
                  aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ steps.retrieve-deploy-account-id.outputs.account_id }}.dkr.ecr.eu-west-2.amazonaws.com

            - name: Create and push multi-architecture manifest for tag
              env:
                  ECR_REPOSITORY: ${{ inputs.dev_container_ecr }}
                  IMAGE_TAG: ${{ inputs.dev_container_image_tag }}
                  ACCOUNT_ID: ${{ steps.retrieve-deploy-account-id.outputs.account_id }}
                  VERSION_TAG_TO_APPLY: ${{ inputs.version_tag_to_apply }}
              run: |
                  # Create manifest list combining both architectures
                  docker buildx imagetools create -t "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:latest" \
                    "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}-amd64" \
                    "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}-arm64"
                  docker buildx imagetools create -t "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${VERSION_TAG_TO_APPLY}" \
                    "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}-amd64" \
                    "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}-arm64"

                  # Create additional tags for individual architecture images without pulling
                  docker buildx imagetools create -t "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${VERSION_TAG_TO_APPLY}-amd64" \
                    "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}-amd64"
                  docker buildx imagetools create -t "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${VERSION_TAG_TO_APPLY}-arm64" \
                    "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}-arm64"
                  docker buildx imagetools create -t "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:latest-amd64" \
                    "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}-amd64"
                  docker buildx imagetools create -t "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:latest-arm64" \
                    "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}-arm64"

            - name: Verify multi-architecture manifest
              env:
                  ECR_REPOSITORY: ${{ inputs.dev_container_ecr }}
                  IMAGE_TAG: ${{ inputs.dev_container_image_tag }}
                  ACCOUNT_ID: ${{ steps.retrieve-deploy-account-id.outputs.account_id }}
              run: |
                  echo "=== Verifying multi-architecture manifest ==="
                  docker buildx imagetools inspect "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${ECR_REPOSITORY}:latest"
